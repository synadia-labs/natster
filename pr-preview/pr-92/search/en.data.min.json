[{"id":0,"href":"/pr-preview/pr-92/usage/getting-started/","title":"Getting Started","parent":"User's Guide","content":"Natster doesn\u0026rsquo;t require much at all from its users. Before moving to the installation section, you will need a Synadia Cloud account. You can sign up for a free account with no commitments.\nSynadia Cloud is a globally hosted, managed NATS cluster that gives distributed applications an unmatched foundation on which to build.\nGo to cloud.synadia.com to register and create a new account. Once you\u0026rsquo;ve done that, move on to the Installation guide.\n","description":"Natster doesn\u0026rsquo;t require much at all from its users. Before moving to the installation section, you will need a Synadia Cloud account. You can sign up for a free account with no commitments.\nSynadia Cloud is a globally hosted, managed NATS cluster that gives distributed applications an unmatched foundation on which to build.\nGo to cloud.synadia.com to register and create a new account. Once you\u0026rsquo;ve done that, move on to the Installation guide."},{"id":1,"href":"/pr-preview/pr-92/usage/","title":"User's Guide","parent":"Natster","content":"This section of the Natster documentation covers how to install, configure, and use the Natster CLI as well as the public Natster website\n","description":"This section of the Natster documentation covers how to install, configure, and use the Natster CLI as well as the public Natster website"},{"id":2,"href":"/pr-preview/pr-92/developer-guide/","title":"Developer Guide","parent":"Natster","content":"The developer\u0026rsquo;s guide is currently under construction\n","description":"The developer\u0026rsquo;s guide is currently under construction"},{"id":3,"href":"/pr-preview/pr-92/developer-guide/architecture/","title":"Architecture Overview","parent":"Developer Guide","content":"Arch overview\nTBD\n","description":"Arch overview\n"},{"id":4,"href":"/pr-preview/pr-92/faq/","title":"FAQ","parent":"Natster","content":"FAQ!\nTBD\n","description":"FAQ!\n"},{"id":5,"href":"/pr-preview/pr-92/usage/init/","title":"Initializing Natster","parent":"User's Guide","content":"In the Getting Started section, you went through the process of signing up for a Synadia Cloud account if you didn\u0026rsquo;t already have one. The next thing we need to do is configure the Natster CLI so that it can communicate with Synadia Cloud on our behalf.\nCreating a Personal Access Token A personal access token allows applications to utilize the Synadia Cloud API on your behalf. This is exactly what Natster will do for nearly all of its core functions. To do this, we use a personal access token or PAT for short. If you\u0026rsquo;ve created SSH keys in GitHub or performed OAuth authorizations then this concept should be pretty familiar.\nFirst, log into your Synadia Cloud account. Once you\u0026rsquo;re on the home page, click the person icon in the top right and choose \u0026ldquo;profile\u0026rdquo;. Once on your profile page, the left navigation bar should contain two categories: General and Access Tokens.\nClick on Access Tokens.\nOnce on the Personal Access Tokens page, click the Create Token button. You\u0026rsquo;ll be prompted for a name and expiration date to be used for the token. It\u0026rsquo;s a good idea to include a reference to Natster somewhere in the token name so you can keep activity separate from other tokens. The expiration date is up to you, but keep in mind that you\u0026rsquo;ll have to re-initialize Natster if your access token expires.\nAs soon as you create the token, it will be displayed to you. You will never see this token again, so you\u0026rsquo;ll want to copy it and store it in a password manager or in some other safe place. You will need this token for the next step.\nHere is a sample showing an active access token:\nCreating a Natster User The Natster CLI, both for ad hoc commands and for running a catalog server, needs to connect to NGS (Synadia Cloud\u0026rsquo;s NATS infrastructure) with a specific user credential. This user will belong to your account and have whatever privileges you decide. Prior to initializing the CLI, you\u0026rsquo;ll want to create this new user. To do so, use the following steps:\nClick the NGS account that you want to use for your Natster activity. You can create a separate account just for use with Natster if you like. On the top tab section, click the Users tab Click the Create User button and fill in the appropriate fields. With the new user created, you\u0026rsquo;re able to initialize the Natster CLI. Don\u0026rsquo;t worry about copying the credentials, the Natster initialization process will take care of that for you.\nInitializing the CLI With your Synadia Cloud token read on the clipboard and a NATS user ready, you can run the init command of the Natster CLI\nnatster init --token \u0026lt;SYNADIA CLOUD TOKEN\u0026gt; You will be prompted for a number of different things when you run init. It will ask you to identify the team, account, and user to establish a new Natster context. Here\u0026rsquo;s an example of the initialization command right before finishing:\n? Select a team: The Team ? Select a system: NGS ? Select an account: The Account ✅ Catalog service export is configured ✅ Media stream export is configured ✅ Natster global service import is configured ✅ Natster global events import is configured ? Select a user for NATS authentication: [Use arrows to move, type to filter] \u0026gt; kevin Verifying Your Identity After you\u0026rsquo;ve initialized and you\u0026rsquo;ve seen no error messages and it all looks like you\u0026rsquo;re ready to go, you can verify the identity that the Natster CLI has for you. To check your identity, you can run the following command (we\u0026rsquo;ve obfuscated the identifiers but your output will have the full values):\n$ natster whoami ╭─────────────────────────────────────────────────────────────────────────────────╮ │ Accounty McAccountFace │ ├──────────────────────┬──────────────────────────────────────────────────────────┤ │ Account │ ACTZW5NQGNUQHWDFNPBPROEC4HJO76K7H3QRARK4DWA2P2KBJEHRCUT7 │ │ Initialized At │ 2024-03-08 12:52:52 │ │ Synadia Cloud Team │ 2bN3..................1MVlQ │ │ Synadia Cloud System │ 2bN3..................1MVN1 │ │ Synadia Cloud User │ 2bN3..................1MV5N │ │ Credentials │ /home/kevin/.natster/accounty.creds │ │ Natster.io Login │ (unlinked) │ ╰──────────────────────┴──────────────────────────────────────────────────────────╯ Congratulations! Now that you\u0026rsquo;re all set up and running, it\u0026rsquo;s time to start using Natster.\n","description":"In the Getting Started section, you went through the process of signing up for a Synadia Cloud account if you didn\u0026rsquo;t already have one. The next thing we need to do is configure the Natster CLI so that it can communicate with Synadia Cloud on our behalf.\n"},{"id":6,"href":"/pr-preview/pr-92/community/","title":"Community","parent":"Natster","content":"Community!\nTBD\n","description":"Community!\n"},{"id":7,"href":"/pr-preview/pr-92/usage/create-catalog/","title":"Creating a Media Catalog","parent":"User's Guide","content":"A media catalog is a collection of logically related media files. Their association with each other could be very specific, or you could have a simple catalog that contains all of the media you wish to share. Since catalogs are the unit of sharing, you\u0026rsquo;ll want to use your sharing plans to influence how many catalogs you have and what they contain.\nLocate or Place Media Files Every catalog has a root directory and all files contained in the catalog must be somewhere (however many levels deep) under that root. Before you create your catalog, you\u0026rsquo;ll want to place all of the files you want in that catalog in its root directory. You can set up the directory structure however you like.\nCreate the Catalog Creating a catalog is a simple process. Decide on a name (alphanumeric only) for the catalog that will serve as its accessible identifier. Then, decide on its root directory and description and then you can use natster catalog new to create the catalog:\nnatster catalog new sample \u0026#34;sample catalog\u0026#34; /home/kevin/medialibrary New catalog created: sample Natster has gone and ingested the contents of that root directory and prepopulated the catalog\u0026rsquo;s JSON file. For example, the preceding catalog can be found at ~/.natster/sample.json and contains the following contents (yours will vary):\n{ \u0026#34;name\u0026#34;: \u0026#34;sample\u0026#34;, \u0026#34;root_dir\u0026#34;: \u0026#34;/home/kevin/medialibrary\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;sample catalog\u0026#34;, \u0026#34;last_modified\u0026#34;: 1710251244, \u0026#34;entries\u0026#34;: [ { \u0026#34;path\u0026#34;: \u0026#34;/README.txt\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Auto-imported library entry\u0026#34;, \u0026#34;mime_type\u0026#34;: \u0026#34;text/plain; charset=utf-8\u0026#34;, \u0026#34;hash\u0026#34;: \u0026#34;df2e9d5d77459d97e0784928f7d30b894732a3e83e460f80254dd3a693d227b9\u0026#34;, \u0026#34;byte_size\u0026#34;: 40 }, { \u0026#34;path\u0026#34;: \u0026#34;/bookvideos/Programming WebAssembly with Rust - Trailer Video.mp4\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Auto-imported library entry\u0026#34;, \u0026#34;mime_type\u0026#34;: \u0026#34;video/mp4\u0026#34;, \u0026#34;hash\u0026#34;: \u0026#34;d1b1ca5d0bebd22266e9078977390dec28addf854ff12a90609a72f2e108cb67\u0026#34;, \u0026#34;byte_size\u0026#34;: 26922231 }, { \u0026#34;path\u0026#34;: \u0026#34;/c/leveltwo.txt\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Auto-imported library entry\u0026#34;, \u0026#34;mime_type\u0026#34;: \u0026#34;text/plain; charset=utf-8\u0026#34;, \u0026#34;hash\u0026#34;: \u0026#34;e6379468fa0990e3be979b6df4aaeea8b88c5d763e793c910fb87a0dc3efc4dd\u0026#34;, \u0026#34;byte_size\u0026#34;: 22 } ] } Here you can see that Natster has automatically produced the hash of each of the files (this will be important later for downloads), stored the byte size, and even made a best-effort attempt at determining the mime type of the file. As you\u0026rsquo;ll see later in this guide, files with a streamable mime type can viewed directly from the natster.io application. The JSON file contains a flat list of files, even if those files have a hierarchical structure.\nIt\u0026rsquo;s important to remember that Natster is decentralized and leverages NATS\u0026rsquo; decentralized security mechanism. Further, the contents of your catalog are not made available to Synadia nor anyone else until you explicitly share them. The catalog contents are never cached and the moment you stop your catalog server, no metadata or files will be available. With our shiny new catalog in hand, we can start sharing it with our friends.\n","description":"A media catalog is a collection of logically related media files. Their association with each other could be very specific, or you could have a simple catalog that contains all of the media you wish to share. Since catalogs are the unit of sharing, you\u0026rsquo;ll want to use your sharing plans to influence how many catalogs you have and what they contain.\nLocate or Place Media Files Every catalog has a root directory and all files contained in the catalog must be somewhere (however many levels deep) under that root."},{"id":8,"href":"/pr-preview/pr-92/developer-guide/decentralized-security/","title":"Decentralized Security","parent":"Developer Guide","content":"decentralized security\nTBD\n","description":"decentralized security\n"},{"id":9,"href":"/pr-preview/pr-92/developer-guide/secure-sharing/","title":"Secure Sharing","parent":"Developer Guide","content":"secure sharing\nTBD\n","description":"secure sharing\n"},{"id":10,"href":"/pr-preview/pr-92/usage/share-catalog/","title":"Sharing a Catalog","parent":"User's Guide","content":"Catalog sharing in Natster is a secure, one-direction agreement between two accounts. This share is directly between you, the sharer, and the target or recipient of your share. Synadia doesn\u0026rsquo;t get any inside information about this share.\nGetting a Target Account Key Part of the decentralized appeal of this system (and, of course, NATS itself) is that you can do things without requiring central administration or facilitation. This is true of the Natster share system, which builds on NATS\u0026rsquo; account exports. To share your catalog with someone else, you will need their account public key.\nThis information is easily obtained. Have the intended recipient of your catalog share run the natster whoami command. The first line of data output from that command is a 56-character, all capital letter ID beginning with the letter A. If you\u0026rsquo;ve used NATS decentralized security before, you\u0026rsquo;ll recognize this as an account\u0026rsquo;s public key. Natster doesn\u0026rsquo;t hide this from you and instead leverages NATS accounts for application security.\nSharing a Catalog Once you have the recipient\u0026rsquo;s public key, you can now share the catalog with a command like so:\nnatster catalog share sample ACTZW5NQGNUQHWDFNPVPROEC4HJO76K7H3QRARK4DWA2P2KBJEHRCUT7 This shares the sample catalog with the account ACTZW5NQGNUQHWDFNPVPROEC4HJO76K7H3QRARK4DWA2P2KBJEHRCUT7. Note that there is no secure or sensitive information exposed in this action.\nThe account ACTZW5NQGNUQ\u0026hellip;UT7 is a fake account key and sharing to this account will fail. One the other side of this share, your friend should import this catalog. As you\u0026rsquo;ll see, the inbox command can be used to list off shared catalogs that have not yet been imported.\nRevoking Catalog Access If at any time you no longer want the recipient to have access to your catalog, you just need to use the catalog unshare command with the same arguments you originally passed to the share command. There\u0026rsquo;s no guarantee that the recipient\u0026rsquo;s quota will be freed for that catalog, but they will no longer be able to access the catalog.\nOnce your friends have imported your catalog, you\u0026rsquo;re ready to start your first catalog server.\n","description":"Catalog sharing in Natster is a secure, one-direction agreement between two accounts. This share is directly between you, the sharer, and the target or recipient of your share. Synadia doesn\u0026rsquo;t get any inside information about this share.\nGetting a Target Account Key Part of the decentralized appeal of this system (and, of course, NATS itself) is that you can do things without requiring central administration or facilitation. This is true of the Natster share system, which builds on NATS\u0026rsquo; account exports."},{"id":11,"href":"/pr-preview/pr-92/developer-guide/global-service/","title":"Global Services","parent":"Developer Guide","content":"global service\nTBD\n","description":"global service\n"},{"id":12,"href":"/pr-preview/pr-92/legal/","title":"Legal and Privacy","parent":"Natster","content":"Natster is a reference application. It is a demonstration of a certain set of features and is in no way a supported product. There is no guaranteed or implied SLA and, while it is an open source example, it has no official support.\nNatster users are solely responsible for any content they share and may not violate any of Synadia\u0026rsquo;s terms of service in doing so.\nFor more information on terms of service and privacy, please see the following Synadia links:\nhttps://www.synadia.com/legal/terms https://www.synadia.com/legal/privacy https://www.synadia.com/legal/eula ","description":"Natster is a reference application. It is a demonstration of a certain set of features and is in no way a supported product. There is no guaranteed or implied SLA and, while it is an open source example, it has no official support.\nNatster users are solely responsible for any content they share and may not violate any of Synadia\u0026rsquo;s terms of service in doing so.\nFor more information on terms of service and privacy, please see the following Synadia links:"},{"id":13,"href":"/pr-preview/pr-92/usage/serve-catalog/","title":"Serving a Catalog","parent":"User's Guide","content":"Serving a catalog involves starting the Natster catalog service. You can run this service anywhere that it has physical access to the contents of the media catalog. Thanks to the global connectivity offered by NGS, you can run this server on your laptop, in the cloud, or even on a Raspberry Pi if the mood suits.\nStarting a Catalog Server Starting the server is easy.\nnatster catalog serve myvideos Here myvideos is the name of a previously created (and hopefully shared) catalog. You\u0026rsquo;ll see output similar to the following once it starts up:\n2024/03/07 09:10:14 INFO Established Natster NATS connection servers=tls://connect.ngs.global 2024/03/07 09:10:14 INFO Opened Media Catalog name=myvideos rootpath=/home/user/myvideos/ 2024/03/07 09:10:14 INFO Natster Media Catalog Server Started 2024/03/07 09:10:14 INFO Local (private) services are available on \u0026#39;natster.local.\u0026gt;\u0026#39; With this server running, only those people to whom you have shared this catalog will be able to access it. No one else can query its contents or the files within.\nInteracting with the Catalog Service When a catalog server starts, it subscribes to a set of topics that are then exposed via account exports in your NGS account. This is how other users with their own separate Synadia Cloud accounts can have secure access to the catalog.\nIn addition to making the service available globally, it is also available locally, allowing you to interact with it. As you\u0026rsquo;ll see in the web UI section, you can even securely see the contents of your catalog from the natster.io website.\nOne incredibly handy thing you might want to do is query the contents of your catalog, as seen by those who have access. To do this, simply use the Natster CLI to query your catalog\u0026rsquo;s contents:\nnatster catalog contents sample ╭──────────────────────────────────────────────────────────────────╮ │ Items in Catalog kevbuzz │ ├──────────────────────────────────────────────────────────────────┤ │ Path │ Hash │ Mime Type │ ├──────────────────────────────────────────────────────────────────┤ │ bookvideos/book.mp4 │ d1b1ca5d0beb...cb67 │ video/mp4 │ │ README.txt │ df2e9d5d7745...27b9 │ text/plain │ ╰──────────────────────────────────────────────────────────────────╯ Here the output has been condensed a bit to make it easily readable in the documentation, but you can see that the catalog contents are identical to what is defined in the catalog\u0026rsquo;s JSON file.\nNow that you\u0026rsquo;ve shared a catalog with someone and the catalog server is running, it\u0026rsquo;s time to take a look at how to securely import shared catalogs.\n","description":"Serving a catalog involves starting the Natster catalog service. You can run this service anywhere that it has physical access to the contents of the media catalog. Thanks to the global connectivity offered by NGS, you can run this server on your laptop, in the cloud, or even on a Raspberry Pi if the mood suits.\nStarting a Catalog Server Starting the server is easy.\nnatster catalog serve myvideos Here myvideos is the name of a previously created (and hopefully shared) catalog."},{"id":14,"href":"/pr-preview/pr-92/developer-guide/catalog-server/","title":"Catalog Server","parent":"Developer Guide","content":"catalog server\nTBD\n","description":"catalog server\n"},{"id":15,"href":"/pr-preview/pr-92/usage/import-catalog/","title":"Import a Catalog","parent":"User's Guide","content":"In Natster, a catalog import is really not much more than a simple NATS account import. For every catalog you import, Natster will create an NGS/NATS subject import in your account.\nDepending on the type of Synadia Cloud team you have and the quotas set on the account you\u0026rsquo;re using for Natster, you might see catalog imports fail. Every catalog import consumes 2 (one for the service, one for media) NATS subject imports. If you don\u0026rsquo;t have enough subject imports remaining in your account, the catalog import will fail.\nNote that every Natster account has only one export for catalogs and this will not grow no matter how many catalogs you share.\nLocating the Source Just as you needed the account public key of the target when you shared a catalog, the recipients of that share need your account public key in order to import. You\u0026rsquo;ve already seen how to obtain this information by using the Natster whoami command. It might seem a little awkward to have to use these opaque keys, but remember Natster is a decentralized system and these keys ensure that Synadia doesn\u0026rsquo;t need to be involved in facilitating shares.\nWith the public key of the sharer in your clipboard, you can run the import command, as shown below:\nnatster catalog import kevbuzz ACTZW5NQGNUQHWDFNPBPROVV4HJO76K7H3QRARK4DWA2P2KBJEHRCUT7 If all goes well and you haven\u0026rsquo;t exceeded your account import quota, you should now have a fully functioning one-way, private exchange between two accounts.\nViewing Catalog Shares There\u0026rsquo;s a very handy Natster command that will list all catalogs known to you. Essentially this is a combination of all of the catalogs you have shared with others and all of the catalogs others have shared with you.\n$ natster catalog ls ╭──────────────────────────────────────────────────────────────────────────────────────╮ │ Shared Catalogs │ ├────┬───────────────┬────────────────────────────────┬────────────────────────────────┤ │ │ Catalog │ From │ To │ ├────┼───────────────┼────────────────────────────────┼────────────────────────────────┤ │ 🟢 │ kevbuzz │ me │ ACSH...PRQOLE3A2YOR7YALKXCKTPA │ │ 🟢 │ jordans_stuff │ ACSH...PRQOLE3A2YOR7YALKXCKTPA │ me │ │ 🟢 │ synadiahub │ AC5V...KAAANER6P6DHKBYGVGJHSNC │ me │ │ 🟢 │ kt │ AATM...5NCGVLMDBBBBCE2XLBQKZEE │ me │ ╰────┴───────────────┴─────────────────────────────────────────────────────────────────╯ The green dot in the preceding output indicates whether that catalog is online. An online catalog is one that has a running catalog server that has submitted a heartbeat to the Natster global service recently. If a catalog server explicitly shuts down or loses network connectivity, its status will switch to offline.\n","description":"In Natster, a catalog import is really not much more than a simple NATS account import. For every catalog you import, Natster will create an NGS/NATS subject import in your account.\nDepending on the type of Synadia Cloud team you have and the quotas set on the account you\u0026rsquo;re using for Natster, you might see catalog imports fail. Every catalog import consumes 2 (one for the service, one for media) NATS subject imports."},{"id":16,"href":"/pr-preview/pr-92/usage/download/","title":"Downloading Files","parent":"User's Guide","content":"Downloading files can be done directly from the Natster CLI. First you need to query a given catalog\u0026rsquo;s contents via the natster catalog contents command. As you\u0026rsquo;ve seen already this will contain the unique hash of each file in that catalog. To download a file, you need to know the catalog in which it resides, and the hash.\nThe following command will download a video from the synadiahub catalog:\n$ natster catalog download synadiahub \\ dbf499dc63b7f990762d578208b8ac5ee9d74d193573219e2ad2f3077841e769 \\ ./s1ep1.mp3 File download request acknowledged: 33656581 bytes (8217 chunks of 4096 bytes each.) from XAQM376L7EBVX6DEKS5BAFLSUJEGE5GUBOEDUFRVFU4GSM6GDGHF72GA Received chunk 0 (4096 bytes) Received chunk 1 (4096 bytes) Received chunk 2 (4096 bytes) Received chunk 3 (4096 bytes) Received chunk 4 (4096 bytes) ... Received chunk 8216 (3845 bytes) Your output may differ as the CLI experience improves. You should now have a file called s1ep1.mp3 which is Season 1, Episode 1, of the NATS.fm podcast.\n$ ls s1ep1.mp3 -rw-rw-r-- 1 kevin kevin 434176 Mar 12 11:11 s1ep1.mp3 Every time you request the download or streaming of a file from a remote catalog server, a brand new set of encryption keys will be generated. These keys (xkeys) are directional, and so only the downloader\u0026rsquo;s private key can be used to decrypt the contents transmitted by the sender. Not only does this ensure that all of your shared data remains private, but the same download key can\u0026rsquo;t be used twice, providing even more security. ","description":"Downloading files can be done directly from the Natster CLI. First you need to query a given catalog\u0026rsquo;s contents via the natster catalog contents command. As you\u0026rsquo;ve seen already this will contain the unique hash of each file in that catalog. To download a file, you need to know the catalog in which it resides, and the hash.\nThe following command will download a video from the synadiahub catalog:\n$ natster catalog download synadiahub \\ dbf499dc63b7f990762d578208b8ac5ee9d74d193573219e2ad2f3077841e769 \\ ."},{"id":17,"href":"/pr-preview/pr-92/developer-guide/context-binding/","title":"Context Binding (OTC)","parent":"Developer Guide","content":"context binding\nTBD\n","description":"context binding\n"},{"id":18,"href":"/pr-preview/pr-92/usage/website/","title":"Web UI","parent":"User's Guide","content":"Using Natster\u0026rsquo;s web UI is just a matter of pointing your browser at natster.io and logging in. Natster supports both Google (e.g. gmail) and Github authentication.\nBefore going to the website, however, you should bind your web identity to your Natster account/CLI.\nBinding your Web Context The Natster web application not only needs to know who you are via Google or Github authentication, but it also needs to know which Natster account context to use whenever you log in.\nThis association between your web identity and your Natster account/CLI credentials is easily established by running the following command:\nnatster login This will generate a one-time code (OTC) and open your browser to the website. Once you\u0026rsquo;re on the website, you can log in with Google or Github and then, after it links your web identity to your Natster account, you will see a screen that looks similar to the following:\nThe web application is easy to use, but if you need contextual help while using it, the application provides tooltips and additional help.\n","description":"Using Natster\u0026rsquo;s web UI is just a matter of pointing your browser at natster.io and logging in. Natster supports both Google (e.g. gmail) and Github authentication.\nBefore going to the website, however, you should bind your web identity to your Natster account/CLI.\nBinding your Web Context The Natster web application not only needs to know who you are via Google or Github authentication, but it also needs to know which Natster account context to use whenever you log in."},{"id":19,"href":"/pr-preview/pr-92/developer-guide/nothing-but-nats/","title":"Nothing but NATS","parent":"Developer Guide","content":"nothing but nats\nTBD\n","description":"nothing but nats\n"},{"id":20,"href":"/pr-preview/pr-92/developer-guide/troubleshooting/","title":"Troubleshooting","parent":"Developer Guide","content":"troubleshooting\nTBD\n","description":"troubleshooting\n"},{"id":21,"href":"/pr-preview/pr-92/developer-guide/streaming-media/","title":"Streaming Media","parent":"Developer Guide","content":"streamy\nTBD\n","description":"streamy\n"},{"id":22,"href":"/pr-preview/pr-92/usage/installation/","title":"Installation","parent":"User's Guide","content":"Natster installation is quite simple. The only thing you need after you\u0026rsquo;ve set up your Synadia Cloud account is the Natster CLI.\nYou can download the CLI using the following shell command:\ncurl -sSf https://natster.io/install.sh | sh After following the prompts and installing the CLI, you can verify your installation with the following command:\nnatster --version v1.0.0 [none] | BuiltOn: 12 Mar 24 08:10 EDT Your version may vary from what\u0026rsquo;s shown above, but if you can run the CLI then you should be able to move on to the next step.\nAll of the metadata about your catalogs and your Natster context will be stored in the .natster directory in the root of your home directory, e.g. ~/.natster on Mac or Linux. You may find yourself editing files in this directory. ","description":"Natster installation is quite simple. The only thing you need after you\u0026rsquo;ve set up your Synadia Cloud account is the Natster CLI.\nYou can download the CLI using the following shell command:\ncurl -sSf https://natster.io/install.sh | sh After following the prompts and installing the CLI, you can verify your installation with the following command:\nnatster --version v1.0.0 [none] | BuiltOn: 12 Mar 24 08:10 EDT Your version may vary from what\u0026rsquo;s shown above, but if you can run the CLI then you should be able to move on to the next step."},{"id":23,"href":"/pr-preview/pr-92/","title":"Natster","parent":"","content":"Natster is a secure, peer-to-multipeer, decentalized media sharing platform. This is a reference application that illustrates patterns for building resilient, scalable, distributed applications that utilize nothing but NATS for all of their core needs.\nGetting Started ","description":"Natster is a secure, peer-to-multipeer, decentalized media sharing platform. This is a reference application that illustrates patterns for building resilient, scalable, distributed applications that utilize nothing but NATS for all of their core needs.\nGetting Started "},{"id":24,"href":"/pr-preview/pr-92/tags/","title":"Tags","parent":"Natster","content":"","description":""}]