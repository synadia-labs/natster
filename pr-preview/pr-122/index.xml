<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Natster</title><link>https://docs.natster.io/pr-preview/pr-122/</link><description>Recent content on Natster</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.natster.io/pr-preview/pr-122/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started</title><link>https://docs.natster.io/pr-preview/pr-122/usage/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/usage/getting-started/</guid><description>Natster doesn&amp;rsquo;t require much at all from its users. Before moving to the installation section, you will need a Synadia Cloud account. You can sign up for a free account with no commitments.
Synadia Cloud is a globally hosted, managed NATS cluster that gives distributed applications an unmatched foundation on which to build.
Go to cloud.synadia.com to register and create a new account. Once you&amp;rsquo;ve done that, move on to the Installation guide.</description></item><item><title>Architecture Overview</title><link>https://docs.natster.io/pr-preview/pr-122/developer-guide/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/developer-guide/architecture/</guid><description>Natster Global Account The Natster Global Service Synadia Hub Account Natster.IO Account User Accounts User Catalog Imports/Exports The Natster architecture relies heavily on NATS decentralized accounts as security boundaries. Each user enables Natster within their Synadia Cloud account. This creates a few automatic subject imports for things like the synadiahub catalog and the Natster global service.
The following diagram provides a layout showing how various components interact with each other.</description></item><item><title>Initializing Natster</title><link>https://docs.natster.io/pr-preview/pr-122/usage/init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/usage/init/</guid><description>&lt;p>In the &lt;strong>Getting Started&lt;/strong> section, you went through the process of signing up for a Synadia Cloud account if you didn&amp;rsquo;t already have one. The next thing we need to do is configure the Natster CLI so that it can communicate with Synadia Cloud on our behalf.&lt;/p></description></item><item><title>Creating a Media Catalog</title><link>https://docs.natster.io/pr-preview/pr-122/usage/create-catalog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/usage/create-catalog/</guid><description>A media catalog is a collection of logically related media files. Their association with each other could be very specific, or you could have a simple catalog that contains all of the media you wish to share. Since catalogs are the unit of sharing, you&amp;rsquo;ll want to use your sharing plans to influence how many catalogs you have and what they contain.
Locate or Place Media Files Every catalog has a root directory and all files contained in the catalog must be somewhere (however many levels deep) under that root.</description></item><item><title>Decentralized Auth</title><link>https://docs.natster.io/pr-preview/pr-122/developer-guide/decentralized-security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/developer-guide/decentralized-security/</guid><description>Rather than build its own security and user account tier like we have to do with most applications, Natster utilizes NATS&amp;rsquo; decentralized authn/authz directly. A Natster account is an NGS account (which is a NATS account). Natster authenticates to Synadia Cloud using JSON Web Tokens (JWT) and seeds.
Traditionally, when we get asked to build an application out of a suite of microservices, we might add services to deal with authentication and authorization.</description></item><item><title>Secure Sharing</title><link>https://docs.natster.io/pr-preview/pr-122/developer-guide/secure-sharing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/developer-guide/secure-sharing/</guid><description>In this section of the documentation, we&amp;rsquo;ll cover how Natster enables incredibly tight security around sharing without having to write much security code at all. The NATS import/export system that comes with decentralized authentication and accounts does all the hard work for us.
Let&amp;rsquo;s take a look at a simple example of how two users might share with each other using Natster. Alice has a catalog full of Rust videos that she would like to share with Bob.</description></item><item><title>Sharing a Catalog</title><link>https://docs.natster.io/pr-preview/pr-122/usage/share-catalog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/usage/share-catalog/</guid><description>Catalog sharing in Natster is a secure, one-direction agreement between two accounts. This share is directly between you, the sharer, and the target or recipient of your share. Synadia doesn&amp;rsquo;t get any inside information about this share.
Getting a Target Account Key Part of the decentralized appeal of this system (and, of course, NATS itself) is that you can do things without requiring central administration or facilitation. This is true of the Natster share system, which builds on NATS&amp;rsquo; account exports.</description></item><item><title>Global Service</title><link>https://docs.natster.io/pr-preview/pr-122/developer-guide/global-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/developer-guide/global-service/</guid><description>The global service does not manage any of your sensitive information other than holding onto the last personal access token you used so that it can make Synadia Cloud API requests on your behalf. We don&amp;rsquo;t want any personal information and nearly all data stored is just reference keys and aggregate statistics to power our dashboard.
Your catalog contents are never queried, stored, or cached by this service.
The Natster global service is consumed by the natster CLI and nearly every function outlined in the API below can be invoked from the CLI.</description></item><item><title>Serving a Catalog</title><link>https://docs.natster.io/pr-preview/pr-122/usage/serve-catalog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/usage/serve-catalog/</guid><description>Serving a catalog involves starting the Natster catalog service. You can run this service anywhere that it has physical access to the contents of the media catalog. Thanks to the global connectivity offered by NGS, you can run this server on your laptop, in the cloud, or even on a Raspberry Pi if the mood suits.
Starting a Catalog Server Starting the server is easy.
natster catalog serve myvideos Here myvideos is the name of a previously created (and hopefully shared) catalog.</description></item><item><title>Catalog Server</title><link>https://docs.natster.io/pr-preview/pr-122/developer-guide/catalog-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/developer-guide/catalog-server/</guid><description>The catalog server is a daemon process that you can run anywhere that has direct access to the files that make up a given catalog. This means you could run it on a Raspberry Pi connected to network storage or you could run it in the cloud pointing at an EBS volume, or, more commonly, you could run the service in your own infrastructure to ensure your files are never stored outside your own environment.</description></item><item><title>Import a Catalog</title><link>https://docs.natster.io/pr-preview/pr-122/usage/import-catalog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/usage/import-catalog/</guid><description>In Natster, a catalog import is really not much more than a simple NATS account import. For every catalog you import, Natster will create an NGS/NATS subject import in your account.
Depending on the type of Synadia Cloud team you have and the quotas set on the account you&amp;rsquo;re using for Natster, you might see catalog imports fail. Every catalog import consumes 2 (one for the service, one for media) NATS subject imports.</description></item><item><title>Downloading Files</title><link>https://docs.natster.io/pr-preview/pr-122/usage/download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/usage/download/</guid><description>Downloading files can be done directly from the Natster CLI. First you need to query a given catalog&amp;rsquo;s contents via the natster catalog contents command. As you&amp;rsquo;ve seen already this will contain the unique hash of each file in that catalog. To download a file, you need to know the catalog in which it resides, and the hash.
The following command will download a video from the synadiahub catalog:
$ natster catalog download synadiahub \ dbf499dc63b7f990762d578208b8ac5ee9d74d193573219e2ad2f3077841e769 \ .</description></item><item><title>Context Binding (OTC)</title><link>https://docs.natster.io/pr-preview/pr-122/developer-guide/context-binding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/developer-guide/context-binding/</guid><description>The core job of context binding is to merge the two contexts or mediums together to provide a single unified experience: web and CLI. When you log into our web application, you do so via OAuth. This means the website gets no information that you don&amp;rsquo;t allow, and is usually just an opaque unique identifier issued by an identity provider.
Natster Init Natster init takes your Synadia Cloud context, indicated by your personal access token.</description></item><item><title>Web UI</title><link>https://docs.natster.io/pr-preview/pr-122/usage/website/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/usage/website/</guid><description>Using Natster&amp;rsquo;s web UI is just a matter of pointing your browser at natster.io and logging in. Natster supports both Google (e.g. gmail) and Github authentication.
Before going to the website, however, you should bind your web identity to your Natster account/CLI.
Binding your Web Context The Natster web application not only needs to know who you are via Google or Github authentication, but it also needs to know which Natster account context to use whenever you log in.</description></item><item><title>Nothing but NATS</title><link>https://docs.natster.io/pr-preview/pr-122/developer-guide/nothing-but-nats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/developer-guide/nothing-but-nats/</guid><description>&amp;ldquo;Nothing but NATS&amp;rdquo; is a philosophy of building applications where we rely on primitives available in NATS for everything we need, eschewing traditional costly, difficult, and complicated cloud products. Some of us treat this philosophy more like a way of life (the 道 Dao of NATS?)
Security Probably the largest return on investment from this philosophy for Natster is in the area of security. By using NATS decentralized authentication and authorization as a core part of the Natster sharing mechanics, we got a tremendous amount of features and functionality for free.</description></item><item><title>Streaming Media</title><link>https://docs.natster.io/pr-preview/pr-122/developer-guide/streaming-media/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/developer-guide/streaming-media/</guid><description>When we originally designed Natster, streaming media was a stretch goal. We planned on supporting single downloads via file chunking and that was all. But because Natster leveraged so much underlying NATS technology, we ended up ahead of schedule, and so had time to explore streaming media.
The natster.io website supports streaming video/mp4 content from catalogs to which you have access. This means that you can log into Natster on your phone and watch the latest videos and tutorials from Synadia.</description></item><item><title>Global Event Log</title><link>https://docs.natster.io/pr-preview/pr-122/developer-guide/global-event-log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/developer-guide/global-event-log/</guid><description>Some portions of the Natster application are what we would call event-sourced. Since the entire application doesn&amp;rsquo;t operate this way (because of time constraints as we worked toward a Kubecon demo release), we&amp;rsquo;ll call it event-sourcey.
The short1 definition of event sourced is that rather than managing an application&amp;rsquo;s state by storing the current values of everything, we instead derive that state from a series of immutable events. We want to know why and how we arrived at a given state and, even more importantly, we want to be able to change the state we store without altering our record of the past.</description></item><item><title>Troubleshooting</title><link>https://docs.natster.io/pr-preview/pr-122/developer-guide/troubleshooting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/developer-guide/troubleshooting/</guid><description>Coming soon!</description></item><item><title>Installation</title><link>https://docs.natster.io/pr-preview/pr-122/usage/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-122/usage/installation/</guid><description>Natster installation is quite simple. The only thing you need after you&amp;rsquo;ve set up your Synadia Cloud account is the Natster CLI.
You can download the CLI using the following shell command:
curl -sSf https://natster.io/install.sh | sh After following the prompts and installing the CLI, you can verify your installation with the following command:
natster --version v1.0.0 [none] | BuiltOn: 12 Mar 24 08:10 EDT Your version may vary from what&amp;rsquo;s shown above, but if you can run the CLI then you should be able to move on to the next step.</description></item></channel></rss>