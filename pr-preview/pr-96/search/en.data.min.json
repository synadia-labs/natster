[{"id":0,"href":"/pr-preview/pr-96/usage/getting-started/","title":"Getting Started","parent":"User's Guide","content":"Natster doesn\u0026rsquo;t require much at all from its users. Before moving to the installation section, you will need a Synadia Cloud account. You can sign up for a free account with no commitments.\nSynadia Cloud is a globally hosted, managed NATS cluster that gives distributed applications an unmatched foundation on which to build.\nGo to cloud.synadia.com to register and create a new account. Once you\u0026rsquo;ve done that, move on to the Installation guide.\n","description":"Natster doesn\u0026rsquo;t require much at all from its users. Before moving to the installation section, you will need a Synadia Cloud account. You can sign up for a free account with no commitments.\nSynadia Cloud is a globally hosted, managed NATS cluster that gives distributed applications an unmatched foundation on which to build.\nGo to cloud.synadia.com to register and create a new account. Once you\u0026rsquo;ve done that, move on to the Installation guide."},{"id":1,"href":"/pr-preview/pr-96/usage/","title":"User's Guide","parent":"Natster","content":"This section of the Natster documentation covers how to install, configure, and use the Natster CLI as well as the public Natster website\n","description":"This section of the Natster documentation covers how to install, configure, and use the Natster CLI as well as the public Natster website"},{"id":2,"href":"/pr-preview/pr-96/developer-guide/","title":"Developer Guide","parent":"Natster","content":"Natster might be useful and incredibly fun, but at its core it\u0026rsquo;s still a teaching tool. It\u0026rsquo;s an open source application built using Nothing but NATS, designed to illustrate patterns for building distributed applications on modern infrastructure with no dependencies on anything but NATS.\n","description":"Natster might be useful and incredibly fun, but at its core it\u0026rsquo;s still a teaching tool. It\u0026rsquo;s an open source application built using Nothing but NATS, designed to illustrate patterns for building distributed applications on modern infrastructure with no dependencies on anything but NATS."},{"id":3,"href":"/pr-preview/pr-96/developer-guide/architecture/","title":"Architecture Overview","parent":"Developer Guide","content":" Natster Global Account The Natster Global Service Synadia Hub Account Natster.IO Account User Accounts User Catalog Imports/Exports The Natster architecture relies heavily on NATS decentralized accounts as security boundaries. Each user enables Natster within their Synadia Cloud account. This creates a few automatic subject imports for things like the synadiahub catalog and the Natster global service.\nThe following diagram provides a layout showing how various components interact with each other. Below that there is an in-depth explanation of each component.\nblock-beta columns 1 block block columns 1 global[\u0026#34;Natster Global Account\u0026#34;] globalsvc end space block columns 1 synadiahub[\u0026#34;Synadia Hub Account\u0026#34;] hubservice[\u0026#34;synadiahub\u0026#34;] end space block columns 1 natsterio[\u0026#34;Natster.io Site Account\u0026#34;] end end space block columns 1 account1[\u0026#34;User Account 1\u0026#34;] block catalog1[\u0026#34;myvideos\u0026#34;] catalog2[\u0026#34;thatvacation\u0026#34;] end end space block columns 1 account2[\u0026#34;User Account 2\u0026#34;] block catalog3[\u0026#34;influencervids\u0026#34;] end end globalsvc -- \u0026#34;service\u0026#34; --\u0026gt; account1 globalsvc -- \u0026#34;service\u0026#34; --\u0026gt; account2 globalsvc --\u0026gt; natsterio hubservice --\u0026gt; account1 hubservice --\u0026gt; account2 catalog1 -- \u0026#34;service/media\u0026#34; --\u0026gt; account2 catalog3 -- \u0026#34;service/media\u0026#34; --\u0026gt; account1 style globalsvc stroke:#064d00,stroke-width:2px,stroke-dasharray: 5 5 style hubservice stroke:#064d00,stroke-width:2px,stroke-dasharray: 5 5 style catalog1 stroke:#064d00,stroke-width:2px,stroke-dasharray: 5 5 style catalog2 stroke:#064d00,stroke-width:2px,stroke-dasharray: 5 5 style catalog3 stroke:#064d00,stroke-width:2px,stroke-dasharray: 5 5 Natster Global Account The Natster global account is just a regular Synadia Hub account. It has no special privileges and doesn\u0026rsquo;t hold a position of any importance within Synadia. It is literally just an account we created within a Synadia Cloud team. That\u0026rsquo;s right: the key lynchpin to this application is running inside an unprivileged account. This means that any application you want to build on top of NATS and Synadia Cloud can work the same way.\nThe Natster global account has the following imports and exports:\nnatster_global - A service export on the subject *.natster.global.\u0026gt; global_events - A feed export on the subject *.natster.global-events.* We\u0026rsquo;ve split the subjects up into two logical roles. The natster_global export exposes a service so that clients can make NATS requests. The global_events export is a feed designed for users to subscribe to. There\u0026rsquo;s no impact on whether you do or don\u0026rsquo;t subscribe to this. The Natster.IO website uses this to help keep the interface up to date in real-time.\nThe Natster Global Service The Natster global service is just a Go binary that is running inside nex1. It awaits requests on a well-known set of subjects forming the global service API.\nThe global service does not manage any of your sensitive information other than holding onto the last personal access token you used so that it can make Synadia Cloud API requests on your behalf. We don\u0026rsquo;t want any personal information and nearly everything stored are just reference keys and statistics to power our dashboard.\nYour catalog contents are never queried, stored, or cached by this service.\nSynadia Hub Account Just like the global service account, the Synadia Hub account is a completely unprivileged user account with no special abilities or security clearances. It is an account just like one you could create for your applications that you build on NATS.\nInside this account there is a NATS user. Running in our cloud infrastructure is a catalog service serving the synadia hub catalog. This catalog is just like anyone else\u0026rsquo;s catalog, except that we have a bunch of interesting content in this catalog about NATS and Synadia Cloud.\nIt has the usual exports for a user account:\nnatster_catalog - A single export used by all sharing clients natster_media - A stream on which encrypted and chunked data is published to valid consumers Natster.IO Account What\u0026rsquo;s interesting about the Natster.IO website is that it communicates with NGS and Synadia Cloud as you. Just like all our other components, the Natster website has no special privileges2. When you log into the website, it pulls your Natster context from a previous context binding and uses that to log in.\nThe website is then really just a fancy version of your CLI, but it\u0026rsquo;s running on a public endpoint, accessible anywhere, without compromising security or performance. Natster.IO subscribes to the natster.global-events.* and natster.local-events.* subjects to keep the user interface updated in realtime.\nUser Accounts As we\u0026rsquo;ve mentioned, all of Natster is made up of user accounts. Aside from the well-known accounts like Synadia Hub and Natster Global, every user can configure an account to use Natster by running the init command from the Natster CLI.\nThese accounts are unprivileged within NGS and can securely share and consume services from other NGS accounts without requiring central facilitation.\nUser Catalog Imports/Exports When a user runs natster catalog serve on one of their local catalogs, it starts a service that utilizes 2 exports total, as well as 2 imports per imported media catalog.3\nnatster_catalog - A single export used by all sharing clients natster_media - A stream on which encrypted and chunked data is published to valid consumers natster_{catalog} - A service-type import used for communicating directly with a shared catalog natster_{catalog}_media - A stream-type import used for capturing encrypted chunks of data requested via the catalog service. As we experiment and expand and contract the infrastructure, we may change the ratio of nex-hosted to non-nex-hosted global service instances. Our design makes this detail irrelevant to clients.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThere is a function on the global service it can call that no one else can, but that\u0026rsquo;s enforced by the global service, and not NATS\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nKeep an eye on your imports because they affect your team\u0026rsquo;s quota\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","description":"Natster Global Account The Natster Global Service Synadia Hub Account Natster.IO Account User Accounts User Catalog Imports/Exports The Natster architecture relies heavily on NATS decentralized accounts as security boundaries. Each user enables Natster within their Synadia Cloud account. This creates a few automatic subject imports for things like the synadiahub catalog and the Natster global service.\nThe following diagram provides a layout showing how various components interact with each other."},{"id":4,"href":"/pr-preview/pr-96/faq/","title":"FAQ","parent":"Natster","content":"FAQ!\nTBD\n","description":"FAQ!\n"},{"id":5,"href":"/pr-preview/pr-96/usage/init/","title":"Initializing Natster","parent":"User's Guide","content":"In the Getting Started section, you went through the process of signing up for a Synadia Cloud account if you didn\u0026rsquo;t already have one. The next thing we need to do is configure the Natster CLI so that it can communicate with Synadia Cloud on our behalf.\nCreating a Personal Access Token A personal access token allows applications to utilize the Synadia Cloud API on your behalf. This is exactly what Natster will do for nearly all of its core functions. To do this, we use a personal access token or PAT for short. If you\u0026rsquo;ve created SSH keys in GitHub or performed OAuth authorizations then this concept should be pretty familiar.\nFirst, log into your Synadia Cloud account. Once you\u0026rsquo;re on the home page, click the person icon in the top right and choose \u0026ldquo;profile\u0026rdquo;. Once on your profile page, the left navigation bar should contain two categories: General and Access Tokens.\nClick on Access Tokens.\nOnce on the Personal Access Tokens page, click the Create Token button. You\u0026rsquo;ll be prompted for a name and expiration date to be used for the token. It\u0026rsquo;s a good idea to include a reference to Natster somewhere in the token name so you can keep activity separate from other tokens. The expiration date is up to you, but keep in mind that you\u0026rsquo;ll have to re-initialize Natster if your access token expires.\nAs soon as you create the token, it will be displayed to you. You will never see this token again, so you\u0026rsquo;ll want to copy it and store it in a password manager or in some other safe place. You will need this token for the next step.\nHere is a sample showing an active access token:\nCreating a Natster User The Natster CLI, both for ad hoc commands and for running a catalog server, needs to connect to NGS (Synadia Cloud\u0026rsquo;s NATS infrastructure) with a specific user credential. This user will belong to your account and have whatever privileges you decide. Prior to initializing the CLI, you\u0026rsquo;ll want to create this new user. To do so, use the following steps:\nClick the NGS account that you want to use for your Natster activity. You can create a separate account just for use with Natster if you like. On the top tab section, click the Users tab Click the Create User button and fill in the appropriate fields. With the new user created, you\u0026rsquo;re able to initialize the Natster CLI. Don\u0026rsquo;t worry about copying the credentials, the Natster initialization process will take care of that for you.\nInitializing the CLI With your Synadia Cloud token read on the clipboard and a NATS user ready, you can run the init command of the Natster CLI\nnatster init --token \u0026lt;SYNADIA CLOUD TOKEN\u0026gt; You will be prompted for a number of different things when you run init. It will ask you to identify the team, account, and user to establish a new Natster context. Here\u0026rsquo;s an example of the initialization command right before finishing:\n? Select a team: The Team ? Select a system: NGS ? Select an account: The Account ✅ Catalog service export is configured ✅ Media stream export is configured ✅ Natster global service import is configured ✅ Natster global events import is configured ? Select a user for NATS authentication: [Use arrows to move, type to filter] \u0026gt; kevin Verifying Your Identity After you\u0026rsquo;ve initialized and you\u0026rsquo;ve seen no error messages and it all looks like you\u0026rsquo;re ready to go, you can verify the identity that the Natster CLI has for you. To check your identity, you can run the following command (we\u0026rsquo;ve obfuscated the identifiers but your output will have the full values):\n$ natster whoami ╭─────────────────────────────────────────────────────────────────────────────────╮ │ Accounty McAccountFace │ ├──────────────────────┬──────────────────────────────────────────────────────────┤ │ Account │ ACTZW5NQGNUQHWDFNPBPROEC4HJO76K7H3QRARK4DWA2P2KBJEHRCUT7 │ │ Initialized At │ 2024-03-08 12:52:52 │ │ Synadia Cloud Team │ 2bN3..................1MVlQ │ │ Synadia Cloud System │ 2bN3..................1MVN1 │ │ Synadia Cloud User │ 2bN3..................1MV5N │ │ Credentials │ /home/kevin/.natster/accounty.creds │ │ Natster.io Login │ (unlinked) │ ╰──────────────────────┴──────────────────────────────────────────────────────────╯ Congratulations! Now that you\u0026rsquo;re all set up and running, it\u0026rsquo;s time to start using Natster.\n","description":"In the Getting Started section, you went through the process of signing up for a Synadia Cloud account if you didn\u0026rsquo;t already have one. The next thing we need to do is configure the Natster CLI so that it can communicate with Synadia Cloud on our behalf.\n"},{"id":6,"href":"/pr-preview/pr-96/community/","title":"Community","parent":"Natster","content":"Community!\nTBD\n","description":"Community!\n"},{"id":7,"href":"/pr-preview/pr-96/usage/create-catalog/","title":"Creating a Media Catalog","parent":"User's Guide","content":"A media catalog is a collection of logically related media files. Their association with each other could be very specific, or you could have a simple catalog that contains all of the media you wish to share. Since catalogs are the unit of sharing, you\u0026rsquo;ll want to use your sharing plans to influence how many catalogs you have and what they contain.\nLocate or Place Media Files Every catalog has a root directory and all files contained in the catalog must be somewhere (however many levels deep) under that root. Before you create your catalog, you\u0026rsquo;ll want to place all of the files you want in that catalog in its root directory. You can set up the directory structure however you like.\nCreate the Catalog Creating a catalog is a simple process. Decide on a name (alphanumeric only) for the catalog that will serve as its accessible identifier. Then, decide on its root directory and description and then you can use natster catalog new to create the catalog:\nnatster catalog new sample \u0026#34;sample catalog\u0026#34; /home/kevin/medialibrary New catalog created: sample Natster has gone and ingested the contents of that root directory and prepopulated the catalog\u0026rsquo;s JSON file. For example, the preceding catalog can be found at ~/.natster/sample.json and contains the following contents (yours will vary):\n{ \u0026#34;name\u0026#34;: \u0026#34;sample\u0026#34;, \u0026#34;root_dir\u0026#34;: \u0026#34;/home/kevin/medialibrary\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;sample catalog\u0026#34;, \u0026#34;last_modified\u0026#34;: 1710251244, \u0026#34;entries\u0026#34;: [ { \u0026#34;path\u0026#34;: \u0026#34;/README.txt\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Auto-imported library entry\u0026#34;, \u0026#34;mime_type\u0026#34;: \u0026#34;text/plain; charset=utf-8\u0026#34;, \u0026#34;hash\u0026#34;: \u0026#34;df2e9d5d77459d97e0784928f7d30b894732a3e83e460f80254dd3a693d227b9\u0026#34;, \u0026#34;byte_size\u0026#34;: 40 }, { \u0026#34;path\u0026#34;: \u0026#34;/bookvideos/Programming WebAssembly with Rust - Trailer Video.mp4\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Auto-imported library entry\u0026#34;, \u0026#34;mime_type\u0026#34;: \u0026#34;video/mp4\u0026#34;, \u0026#34;hash\u0026#34;: \u0026#34;d1b1ca5d0bebd22266e9078977390dec28addf854ff12a90609a72f2e108cb67\u0026#34;, \u0026#34;byte_size\u0026#34;: 26922231 }, { \u0026#34;path\u0026#34;: \u0026#34;/c/leveltwo.txt\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Auto-imported library entry\u0026#34;, \u0026#34;mime_type\u0026#34;: \u0026#34;text/plain; charset=utf-8\u0026#34;, \u0026#34;hash\u0026#34;: \u0026#34;e6379468fa0990e3be979b6df4aaeea8b88c5d763e793c910fb87a0dc3efc4dd\u0026#34;, \u0026#34;byte_size\u0026#34;: 22 } ] } Here you can see that Natster has automatically produced the hash of each of the files (this will be important later for downloads), stored the byte size, and even made a best-effort attempt at determining the mime type of the file. As you\u0026rsquo;ll see later in this guide, files with a streamable mime type can viewed directly from the natster.io application. The JSON file contains a flat list of files, even if those files have a hierarchical structure.\nIt\u0026rsquo;s important to remember that Natster is decentralized and leverages NATS\u0026rsquo; decentralized security mechanism. Further, the contents of your catalog are not made available to Synadia nor anyone else until you explicitly share them. The catalog contents are never cached and the moment you stop your catalog server, no metadata or files will be available. With our shiny new catalog in hand, we can start sharing it with our friends.\n","description":"A media catalog is a collection of logically related media files. Their association with each other could be very specific, or you could have a simple catalog that contains all of the media you wish to share. Since catalogs are the unit of sharing, you\u0026rsquo;ll want to use your sharing plans to influence how many catalogs you have and what they contain.\nLocate or Place Media Files Every catalog has a root directory and all files contained in the catalog must be somewhere (however many levels deep) under that root."},{"id":8,"href":"/pr-preview/pr-96/developer-guide/decentralized-security/","title":"Decentralized Security","parent":"Developer Guide","content":"explain and link to what accounts are and how JWTs and seeds work. mention that a whole server can be compromised and not leak a single secret.\n","description":"explain and link to what accounts are and how JWTs and seeds work. mention that a whole server can be compromised and not leak a single secret."},{"id":9,"href":"/pr-preview/pr-96/developer-guide/secure-sharing/","title":"Secure Sharing","parent":"Developer Guide","content":"In this section of the documentation, we\u0026rsquo;ll cover how Natster enables incredibly tight security around sharing without having to write much security code at all. The NATS import/export system that comes with decentralized authentication and accounts does all the hard work for us.\nLet\u0026rsquo;s take a look at a simple example of how two users might share with each other using Natster. Alice has a catalog full of Rust videos that she would like to share with Bob. On the other hand, Bob has a catalog full of Elixir videos that he would like to share with Alice.\nIn this scenario, Alice will share her rustvideos catalog with Bob, and Bob will share his elixirvideos catalog with Alice. This results in both Alice and Bob adding 2 new imports each while they reuse their pre-existing exports for both catalog services and media.\nblock-beta columns 1 block:firstparty columns 2 alice[\u0026#34;Alice\u0026#39;s Account\u0026#34;]:2 in_natster_elixirvideos[\u0026#34;natster_elixirvideos (in)\u0026#34;] in_natster_elixirvideos_media[\u0026#34;natster_elixirvideos_media (in)\u0026#34;] out_natster_rustvideos[\u0026#34;natster_rustvideos (out)\u0026#34;] out_natster_rustvideos_media[\u0026#34;natster_rustvideos_media (out)\u0026#34;] end space block:secondparty columns 2 in_natster_rustvideos[\u0026#34;natster_rustvideos (in)\u0026#34;] in_natster_rustvideos_media[\u0026#34;natster_rustvideos_media (in)\u0026#34;] out_natster_elixirvideos[\u0026#34;natster_elixir_videos (out)\u0026#34;] out_natster_elixirvideos_media[\u0026#34;natster_elixir_videos_media (out)\u0026#34;] bob[\u0026#34;Bob\u0026#39;s Account\u0026#34;]:2 end out_natster_rustvideos --\u0026gt; in_natster_rustvideos out_natster_rustvideos_media --\u0026gt; in_natster_rustvideos_media out_natster_elixirvideos --\u0026gt; in_natster_elixirvideos out_natster_elixirvideos_media --\u0026gt; in_natster_elixirvideos_media style out_natster_rustvideos stroke:#064d00,stroke-width:2px,stroke-dasharray: 5 5 style in_natster_rustvideos stroke:#064d00,stroke-width:2px,stroke-dasharray: 5 5 style out_natster_elixirvideos stroke:#064d00,stroke-width:2px,stroke-dasharray: 5 5 style in_natster_elixirvideos stroke:#064d00,stroke-width:2px,stroke-dasharray: 5 5 style out_natster_rustvideos_media stroke:#064d00,stroke-width:2px,stroke-dasharray: 5 5 style in_natster_rustvideos_media stroke:#064d00,stroke-width:2px,stroke-dasharray: 5 5 style out_natster_elixirvideos_media stroke:#064d00,stroke-width:2px,stroke-dasharray: 5 5 style in_natster_elixirvideos_media stroke:#064d00,stroke-width:2px,stroke-dasharray: 5 5 One-Way Sharing Depending on how Mermaid renders the above diagram, it might be a little difficult to see where the arrows are. There is a one-way export from Alice to Bob containing her Rust videos and there is a one-way export from Bob to Alice containing his Elixir videos. No other Synadia Cloud user is aware of this share nor can they leverage it in any way to gain access to the catalog contents or the media contained within.\nAccount Token Positions With all of this importing and exporting going on, how do we ensure that Alice and Bob can both securely share their information and also make sure that no other NGS user, no matter how clever, can impersonate either Bob or Alice to get at private media?\nThis is where one of NATS most underrated and powerful features comes in, account token positions. It also doesn\u0026rsquo;t appear much in the main documentation, which could be improved. The way an account token position works is that we can use the subject mapping feature of imports to enforce that no one else in the universe can create an import with the same subject.\nImports with Account Tokens Let\u0026rsquo;s take a look at Bob\u0026rsquo;s import, where he\u0026rsquo;s importing the rustvideos catalog from Alice. For the sake of brevity, we\u0026rsquo;ll assume that Alice\u0026rsquo;s account key is AALICE and Bob\u0026rsquo;s account key is ABOB.\nBob\u0026rsquo;s Import:\nField Value Description Subject ABOB.naster.catalog.rustvideos.\u0026gt; The subject to be imported LocalSubject natster.catalog.rustvideos.\u0026gt; The local subject mapping Alice\u0026rsquo;s Export:\nField Value Description Subject *.naster.catalog.\u0026gt; The subject to be exported AccountTokenPosition 1 Enforced token position of the account key Something incredibly powerful happens here when you have a single export (e.g. Alice) that can be imported by other accounts and we utilize the AccountTokenPosition field. With this field set on the export, all importers must supply their account key as the first subject token.\nNot only does the account key have to be specified by the importer and in a specific token position (1-based index), but NATS will enforce that account key specified on the import matches the account context of the importer.\nPut more simply, when Bob goes to import Alice\u0026rsquo;s rustvideos catalog, he must supply his own account\u0026rsquo;s public key in the import. If he tries to lie about this and use someone else\u0026rsquo;s public key to try and steal data, NATS will reject this.\nWe get all of this security for free simply by leveraging built-in NATS security concepts like accounts and secure import/export.\nEnforcing Access Rights With as much coverage of the built-in security as we\u0026rsquo;ve been doing, it would be easy to think that was everything that needed to be done. When it comes to exports, we\u0026rsquo;ve decided to use a single export for all catalogs per account. This way, you can share your catalog with as many people as you like and not take away from your team or account export quota. In other words, the quota burden is on the importer, not the exporter.\nThis does leave us with a question. How do we enforce that ABOB has access to the rustvideos catalog? We know that NATS will ensure that anyone claiming to be ABOB is actually ABOB, so we don\u0026rsquo;t have to worry about identity.\nThis is where the global event log comes in. From this event log we generate projections. Inside each projection (stored in a key-value bucket) is a list of users that have been granted access to a catalog by virtue of its owner issuing a natster catalog share command.\nThe catalog service fetches this information based on ABOB\u0026rsquo;s account and if the rustvideos catalog has indeed been shared with ABOB, then anyone with access to that import can view and download the contents of Alice\u0026rsquo;s Rust videos.\n","description":"In this section of the documentation, we\u0026rsquo;ll cover how Natster enables incredibly tight security around sharing without having to write much security code at all. The NATS import/export system that comes with decentralized authentication and accounts does all the hard work for us.\nLet\u0026rsquo;s take a look at a simple example of how two users might share with each other using Natster. Alice has a catalog full of Rust videos that she would like to share with Bob."},{"id":10,"href":"/pr-preview/pr-96/usage/share-catalog/","title":"Sharing a Catalog","parent":"User's Guide","content":"Catalog sharing in Natster is a secure, one-direction agreement between two accounts. This share is directly between you, the sharer, and the target or recipient of your share. Synadia doesn\u0026rsquo;t get any inside information about this share.\nGetting a Target Account Key Part of the decentralized appeal of this system (and, of course, NATS itself) is that you can do things without requiring central administration or facilitation. This is true of the Natster share system, which builds on NATS\u0026rsquo; account exports. To share your catalog with someone else, you will need their account public key.\nThis information is easily obtained. Have the intended recipient of your catalog share run the natster whoami command. The first line of data output from that command is a 56-character, all capital letter ID beginning with the letter A. If you\u0026rsquo;ve used NATS decentralized security before, you\u0026rsquo;ll recognize this as an account\u0026rsquo;s public key. Natster doesn\u0026rsquo;t hide this from you and instead leverages NATS accounts for application security.\nSharing a Catalog Once you have the recipient\u0026rsquo;s public key, you can now share the catalog with a command like so:\nnatster catalog share sample ACTZW5NQGNUQHWDFNPVPROEC4HJO76K7H3QRARK4DWA2P2KBJEHRCUT7 This shares the sample catalog with the account ACTZW5NQGNUQHWDFNPVPROEC4HJO76K7H3QRARK4DWA2P2KBJEHRCUT7. Note that there is no secure or sensitive information exposed in this action.\nThe account ACTZW5NQGNUQ\u0026hellip;UT7 is a fake account key and sharing to this account will fail. One the other side of this share, your friend should import this catalog. As you\u0026rsquo;ll see, the inbox command can be used to list off shared catalogs that have not yet been imported.\nRevoking Catalog Access If at any time you no longer want the recipient to have access to your catalog, you just need to use the catalog unshare command with the same arguments you originally passed to the share command. There\u0026rsquo;s no guarantee that the recipient\u0026rsquo;s quota will be freed for that catalog, but they will no longer be able to access the catalog.\nOnce your friends have imported your catalog, you\u0026rsquo;re ready to start your first catalog server.\n","description":"Catalog sharing in Natster is a secure, one-direction agreement between two accounts. This share is directly between you, the sharer, and the target or recipient of your share. Synadia doesn\u0026rsquo;t get any inside information about this share.\nGetting a Target Account Key Part of the decentralized appeal of this system (and, of course, NATS itself) is that you can do things without requiring central administration or facilitation. This is true of the Natster share system, which builds on NATS\u0026rsquo; account exports."},{"id":11,"href":"/pr-preview/pr-96/developer-guide/global-service/","title":"Global Service","parent":"Developer Guide","content":"The global service does not manage any of your sensitive information other than holding onto the last personal access token you used so that it can make Synadia Cloud API requests on your behalf. We don\u0026rsquo;t want any personal information and nearly all data stored is just reference keys and aggregate statistics to power our dashboard.\nYour catalog contents are never queried, stored, or cached by this service.\nThe Natster global service is consumed by the natster CLI and nearly every function outlined in the API below can be invoked from the CLI.\nAll of the following API functions are prefixed with natster.global, so the whoami function is actually on natster.global.whoami.\nSubject Description events.put The payload is a cloud event. If valid, the event is written to the appropriate log heartbeats.put Submits a heartbeat so the backend can keep track of which catalogs are online stats An empty request to this subject will return global summary stats, such as how many catalogs are online my.shares Requests the list of all catalogs known to the caller. This includes catalogs shared by the caller and shared to the caller. otc.generate Generates a one-time code that can be claimed by an authenticated web user to perform context binding. These tokens will expire in 5 minutes, by default otc.claim Called by the Natster website to associate a valid OAuth ID with the context previously published on the otc.generate subject whoami Called by a valid user to obtain information about who Natster thinks they are. Very useful in troubleshooting. context.get Retrieves a bound context based on the OAuth ID attempting to log in. Only usable by the Natster.IO site account catalogs.validatename Used by the CLI to vet the names used when creating and sharing catalogs. Rejects names of catalogs that have already been created and shared, for example ","description":"The global service does not manage any of your sensitive information other than holding onto the last personal access token you used so that it can make Synadia Cloud API requests on your behalf. We don\u0026rsquo;t want any personal information and nearly all data stored is just reference keys and aggregate statistics to power our dashboard.\nYour catalog contents are never queried, stored, or cached by this service.\nThe Natster global service is consumed by the natster CLI and nearly every function outlined in the API below can be invoked from the CLI."},{"id":12,"href":"/pr-preview/pr-96/legal/","title":"Legal and Privacy","parent":"Natster","content":"Natster is a reference application. It is a demonstration of a certain set of features and is in no way a supported product. There is no guaranteed or implied SLA and, while it is an open source example, it has no official support.\nNatster users are solely responsible for any content they share and may not violate any of Synadia\u0026rsquo;s terms of service in doing so.\nFor more information on terms of service and privacy, please see the following Synadia links:\nhttps://www.synadia.com/legal/terms https://www.synadia.com/legal/privacy https://www.synadia.com/legal/eula ","description":"Natster is a reference application. It is a demonstration of a certain set of features and is in no way a supported product. There is no guaranteed or implied SLA and, while it is an open source example, it has no official support.\nNatster users are solely responsible for any content they share and may not violate any of Synadia\u0026rsquo;s terms of service in doing so.\nFor more information on terms of service and privacy, please see the following Synadia links:"},{"id":13,"href":"/pr-preview/pr-96/usage/serve-catalog/","title":"Serving a Catalog","parent":"User's Guide","content":"Serving a catalog involves starting the Natster catalog service. You can run this service anywhere that it has physical access to the contents of the media catalog. Thanks to the global connectivity offered by NGS, you can run this server on your laptop, in the cloud, or even on a Raspberry Pi if the mood suits.\nStarting a Catalog Server Starting the server is easy.\nnatster catalog serve myvideos Here myvideos is the name of a previously created (and hopefully shared) catalog. You\u0026rsquo;ll see output similar to the following once it starts up:\n2024/03/07 09:10:14 INFO Established Natster NATS connection servers=tls://connect.ngs.global 2024/03/07 09:10:14 INFO Opened Media Catalog name=myvideos rootpath=/home/user/myvideos/ 2024/03/07 09:10:14 INFO Natster Media Catalog Server Started 2024/03/07 09:10:14 INFO Local (private) services are available on \u0026#39;natster.local.\u0026gt;\u0026#39; With this server running, only those people to whom you have shared this catalog will be able to access it. No one else can query its contents or the files within.\nInteracting with the Catalog Service When a catalog server starts, it subscribes to a set of topics that are then exposed via account exports in your NGS account. This is how other users with their own separate Synadia Cloud accounts can have secure access to the catalog.\nIn addition to making the service available globally, it is also available locally, allowing you to interact with it. As you\u0026rsquo;ll see in the web UI section, you can even securely see the contents of your catalog from the natster.io website.\nOne incredibly handy thing you might want to do is query the contents of your catalog, as seen by those who have access. To do this, simply use the Natster CLI to query your catalog\u0026rsquo;s contents:\nnatster catalog contents sample ╭──────────────────────────────────────────────────────────────────╮ │ Items in Catalog kevbuzz │ ├──────────────────────────────────────────────────────────────────┤ │ Path │ Hash │ Mime Type │ ├──────────────────────────────────────────────────────────────────┤ │ bookvideos/book.mp4 │ d1b1ca5d0beb...cb67 │ video/mp4 │ │ README.txt │ df2e9d5d7745...27b9 │ text/plain │ ╰──────────────────────────────────────────────────────────────────╯ Here the output has been condensed a bit to make it easily readable in the documentation, but you can see that the catalog contents are identical to what is defined in the catalog\u0026rsquo;s JSON file.\nNow that you\u0026rsquo;ve shared a catalog with someone and the catalog server is running, it\u0026rsquo;s time to take a look at how to securely import shared catalogs.\n","description":"Serving a catalog involves starting the Natster catalog service. You can run this service anywhere that it has physical access to the contents of the media catalog. Thanks to the global connectivity offered by NGS, you can run this server on your laptop, in the cloud, or even on a Raspberry Pi if the mood suits.\nStarting a Catalog Server Starting the server is easy.\nnatster catalog serve myvideos Here myvideos is the name of a previously created (and hopefully shared) catalog."},{"id":14,"href":"/pr-preview/pr-96/developer-guide/catalog-server/","title":"Catalog Server","parent":"Developer Guide","content":"The catalog server is a daemon process that you can run anywhere that has direct access to the files that make up a given catalog. This means you could run it on a Raspberry Pi connected to network storage or you could run it in the cloud pointing at an EBS volume, or, more commonly, you could run the service in your own infrastructure to ensure your files are never stored outside your own environment.\nThe catalog server is started via the Natster CLI with the catalog serve command. It takes the name of an existing catalog as a parameter. Once running, it utilizes the imports and exports we\u0026rsquo;ve previously discussed to expose the catalog as a service.\nCatalog Service API The catalog server exposes a fairly simple API for accessing the contents of the hosted catalog. As with all APIs in the Natster ecosystem, this is a core NATS API. The functions listed below are also used by the natster CLI so you won\u0026rsquo;t need to access them directly unless you\u0026rsquo;re troubleshooting.\nUnless otherwise indicated, all service endpoints described below are assumed to be prefixed with natster.catalog., so the catalog.*.get function is really natster.catalog.{catalog}.get.\nSubject Description {catalog}.get Obtains the contents of the given catalog. If the catalog is not running, the caller will receive the typical \u0026ldquo;no responders\u0026rdquo; reply. If the caller does not have permission (the catalog has not been shared with them), this will return an envelope indicating unauthorize {catalog}.download Requests the download of a file indicated by its hash. If the download is approved, the caller may download the encrypted file chunks on natster.media.{catalog}.{hash} natster.local.inbox A function only exposed inside the account running the catalog server. Used to query a list of pending shares, e.g. catalogs that have been shared with the caller but not yet imported. This is a queue subscription so only one catalog server will handle this request ","description":"The catalog server is a daemon process that you can run anywhere that has direct access to the files that make up a given catalog. This means you could run it on a Raspberry Pi connected to network storage or you could run it in the cloud pointing at an EBS volume, or, more commonly, you could run the service in your own infrastructure to ensure your files are never stored outside your own environment."},{"id":15,"href":"/pr-preview/pr-96/usage/import-catalog/","title":"Import a Catalog","parent":"User's Guide","content":"In Natster, a catalog import is really not much more than a simple NATS account import. For every catalog you import, Natster will create an NGS/NATS subject import in your account.\nDepending on the type of Synadia Cloud team you have and the quotas set on the account you\u0026rsquo;re using for Natster, you might see catalog imports fail. Every catalog import consumes 2 (one for the service, one for media) NATS subject imports. If you don\u0026rsquo;t have enough subject imports remaining in your account, the catalog import will fail.\nNote that every Natster account has only one export for catalogs and this will not grow no matter how many catalogs you share.\nLocating the Source Just as you needed the account public key of the target when you shared a catalog, the recipients of that share need your account public key in order to import. You\u0026rsquo;ve already seen how to obtain this information by using the Natster whoami command. It might seem a little awkward to have to use these opaque keys, but remember Natster is a decentralized system and these keys ensure that Synadia doesn\u0026rsquo;t need to be involved in facilitating shares.\nWith the public key of the sharer in your clipboard, you can run the import command, as shown below:\nnatster catalog import kevbuzz ACTZW5NQGNUQHWDFNPBPROVV4HJO76K7H3QRARK4DWA2P2KBJEHRCUT7 If all goes well and you haven\u0026rsquo;t exceeded your account import quota, you should now have a fully functioning one-way, private exchange between two accounts.\nViewing Catalog Shares There\u0026rsquo;s a very handy Natster command that will list all catalogs known to you. Essentially this is a combination of all of the catalogs you have shared with others and all of the catalogs others have shared with you.\n$ natster catalog ls ╭──────────────────────────────────────────────────────────────────────────────────────╮ │ Shared Catalogs │ ├────┬───────────────┬────────────────────────────────┬────────────────────────────────┤ │ │ Catalog │ From │ To │ ├────┼───────────────┼────────────────────────────────┼────────────────────────────────┤ │ 🟢 │ kevbuzz │ me │ ACSH...PRQOLE3A2YOR7YALKXCKTPA │ │ 🟢 │ jordans_stuff │ ACSH...PRQOLE3A2YOR7YALKXCKTPA │ me │ │ 🟢 │ synadiahub │ AC5V...KAAANER6P6DHKBYGVGJHSNC │ me │ │ 🟢 │ kt │ AATM...5NCGVLMDBBBBCE2XLBQKZEE │ me │ ╰────┴───────────────┴─────────────────────────────────────────────────────────────────╯ The green dot in the preceding output indicates whether that catalog is online. An online catalog is one that has a running catalog server that has submitted a heartbeat to the Natster global service recently. If a catalog server explicitly shuts down or loses network connectivity, its status will switch to offline.\n","description":"In Natster, a catalog import is really not much more than a simple NATS account import. For every catalog you import, Natster will create an NGS/NATS subject import in your account.\nDepending on the type of Synadia Cloud team you have and the quotas set on the account you\u0026rsquo;re using for Natster, you might see catalog imports fail. Every catalog import consumes 2 (one for the service, one for media) NATS subject imports."},{"id":16,"href":"/pr-preview/pr-96/usage/download/","title":"Downloading Files","parent":"User's Guide","content":"Downloading files can be done directly from the Natster CLI. First you need to query a given catalog\u0026rsquo;s contents via the natster catalog contents command. As you\u0026rsquo;ve seen already this will contain the unique hash of each file in that catalog. To download a file, you need to know the catalog in which it resides, and the hash.\nThe following command will download a video from the synadiahub catalog:\n$ natster catalog download synadiahub \\ dbf499dc63b7f990762d578208b8ac5ee9d74d193573219e2ad2f3077841e769 \\ ./s1ep1.mp3 File download request acknowledged: 33656581 bytes (8217 chunks of 4096 bytes each.) from XAQM376L7EBVX6DEKS5BAFLSUJEGE5GUBOEDUFRVFU4GSM6GDGHF72GA Received chunk 0 (4096 bytes) Received chunk 1 (4096 bytes) Received chunk 2 (4096 bytes) Received chunk 3 (4096 bytes) Received chunk 4 (4096 bytes) ... Received chunk 8216 (3845 bytes) Your output may differ as the CLI experience improves. You should now have a file called s1ep1.mp3 which is Season 1, Episode 1, of the NATS.fm podcast.\n$ ls s1ep1.mp3 -rw-rw-r-- 1 kevin kevin 434176 Mar 12 11:11 s1ep1.mp3 Every time you request the download or streaming of a file from a remote catalog server, a brand new set of encryption keys will be generated. These keys (xkeys) are directional, and so only the downloader\u0026rsquo;s private key can be used to decrypt the contents transmitted by the sender. Not only does this ensure that all of your shared data remains private, but the same download key can\u0026rsquo;t be used twice, providing even more security. ","description":"Downloading files can be done directly from the Natster CLI. First you need to query a given catalog\u0026rsquo;s contents via the natster catalog contents command. As you\u0026rsquo;ve seen already this will contain the unique hash of each file in that catalog. To download a file, you need to know the catalog in which it resides, and the hash.\nThe following command will download a video from the synadiahub catalog:\n$ natster catalog download synadiahub \\ dbf499dc63b7f990762d578208b8ac5ee9d74d193573219e2ad2f3077841e769 \\ ."},{"id":17,"href":"/pr-preview/pr-96/developer-guide/context-binding/","title":"Context Binding (OTC)","parent":"Developer Guide","content":"context binding\nTBD\n","description":"context binding\n"},{"id":18,"href":"/pr-preview/pr-96/usage/website/","title":"Web UI","parent":"User's Guide","content":"Using Natster\u0026rsquo;s web UI is just a matter of pointing your browser at natster.io and logging in. Natster supports both Google (e.g. gmail) and Github authentication.\nBefore going to the website, however, you should bind your web identity to your Natster account/CLI.\nBinding your Web Context The Natster web application not only needs to know who you are via Google or Github authentication, but it also needs to know which Natster account context to use whenever you log in.\nThis association between your web identity and your Natster account/CLI credentials is easily established by running the following command:\nnatster login This will generate a one-time code (OTC) and open your browser to the website. Once you\u0026rsquo;re on the website, you can log in with Google or Github and then, after it links your web identity to your Natster account, you will see a screen that looks similar to the following:\nThe web application is easy to use, but if you need contextual help while using it, the application provides tooltips and additional help.\n","description":"Using Natster\u0026rsquo;s web UI is just a matter of pointing your browser at natster.io and logging in. Natster supports both Google (e.g. gmail) and Github authentication.\nBefore going to the website, however, you should bind your web identity to your Natster account/CLI.\nBinding your Web Context The Natster web application not only needs to know who you are via Google or Github authentication, but it also needs to know which Natster account context to use whenever you log in."},{"id":19,"href":"/pr-preview/pr-96/developer-guide/nothing-but-nats/","title":"Nothing but NATS","parent":"Developer Guide","content":"nothing but nats\nTBD\n","description":"nothing but nats\n"},{"id":20,"href":"/pr-preview/pr-96/developer-guide/troubleshooting/","title":"Troubleshooting","parent":"Developer Guide","content":"troubleshooting\nTBD\n","description":"troubleshooting\n"},{"id":21,"href":"/pr-preview/pr-96/developer-guide/streaming-media/","title":"Streaming Media","parent":"Developer Guide","content":"streamy\none-use encryption keys\nTBD\n","description":"streamy\none-use encryption keys\n"},{"id":22,"href":"/pr-preview/pr-96/developer-guide/global-event-log/","title":"Global Event Log","parent":"Developer Guide","content":"TBD\n","description":"TBD"},{"id":23,"href":"/pr-preview/pr-96/usage/installation/","title":"Installation","parent":"User's Guide","content":"Natster installation is quite simple. The only thing you need after you\u0026rsquo;ve set up your Synadia Cloud account is the Natster CLI.\nYou can download the CLI using the following shell command:\ncurl -sSf https://natster.io/install.sh | sh After following the prompts and installing the CLI, you can verify your installation with the following command:\nnatster --version v1.0.0 [none] | BuiltOn: 12 Mar 24 08:10 EDT Your version may vary from what\u0026rsquo;s shown above, but if you can run the CLI then you should be able to move on to the next step.\nAll of the metadata about your catalogs and your Natster context will be stored in the .natster directory in the root of your home directory, e.g. ~/.natster on Mac or Linux. You may find yourself editing files in this directory. ","description":"Natster installation is quite simple. The only thing you need after you\u0026rsquo;ve set up your Synadia Cloud account is the Natster CLI.\nYou can download the CLI using the following shell command:\ncurl -sSf https://natster.io/install.sh | sh After following the prompts and installing the CLI, you can verify your installation with the following command:\nnatster --version v1.0.0 [none] | BuiltOn: 12 Mar 24 08:10 EDT Your version may vary from what\u0026rsquo;s shown above, but if you can run the CLI then you should be able to move on to the next step."},{"id":24,"href":"/pr-preview/pr-96/","title":"Natster","parent":"","content":"Natster is a NATS-based media sharing platform. It is a reference application that illustrates patterns for building resilient, scalable, distributed applications that utilize nothing but NATS for all of their core needs.\nGetting Started ","description":"Natster is a NATS-based media sharing platform. It is a reference application that illustrates patterns for building resilient, scalable, distributed applications that utilize nothing but NATS for all of their core needs.\nGetting Started "},{"id":25,"href":"/pr-preview/pr-96/tags/","title":"Tags","parent":"Natster","content":"","description":""}]