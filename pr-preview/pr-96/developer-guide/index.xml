<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer Guide on Natster</title><link>https://docs.natster.io/pr-preview/pr-96/developer-guide/</link><description>Recent content in Developer Guide on Natster</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.natster.io/pr-preview/pr-96/developer-guide/index.xml" rel="self" type="application/rss+xml"/><item><title>Architecture Overview</title><link>https://docs.natster.io/pr-preview/pr-96/developer-guide/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-96/developer-guide/architecture/</guid><description>Natster Global Account The Natster Global Service Synadia Hub Account Natster.IO Account User Accounts User Catalog Imports/Exports The Natster architecture relies heavily on NATS decentralized accounts as security boundaries. Each user enables Natster within their Synadia Cloud account. This creates a few automatic subject imports for things like the synadiahub catalog and the Natster global service.
The following diagram provides a layout showing how various components interact with each other.</description></item><item><title>Decentralized Security</title><link>https://docs.natster.io/pr-preview/pr-96/developer-guide/decentralized-security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-96/developer-guide/decentralized-security/</guid><description>explain and link to what accounts are and how JWTs and seeds work. mention that a whole server can be compromised and not leak a single secret.</description></item><item><title>Secure Sharing</title><link>https://docs.natster.io/pr-preview/pr-96/developer-guide/secure-sharing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-96/developer-guide/secure-sharing/</guid><description>In this section of the documentation, we&amp;rsquo;ll cover how Natster enables incredibly tight security around sharing without having to write much security code at all. The NATS import/export system that comes with decentralized authentication and accounts does all the hard work for us.
Let&amp;rsquo;s take a look at a simple example of how two users might share with each other using Natster. Alice has a catalog full of Rust videos that she would like to share with Bob.</description></item><item><title>Global Service</title><link>https://docs.natster.io/pr-preview/pr-96/developer-guide/global-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-96/developer-guide/global-service/</guid><description>The global service does not manage any of your sensitive information other than holding onto the last personal access token you used so that it can make Synadia Cloud API requests on your behalf. We don&amp;rsquo;t want any personal information and nearly all data stored is just reference keys and aggregate statistics to power our dashboard.
Your catalog contents are never queried, stored, or cached by this service.
The Natster global service is consumed by the natster CLI and nearly every function outlined in the API below can be invoked from the CLI.</description></item><item><title>Catalog Server</title><link>https://docs.natster.io/pr-preview/pr-96/developer-guide/catalog-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-96/developer-guide/catalog-server/</guid><description>The catalog server is a daemon process that you can run anywhere that has direct access to the files that make up a given catalog. This means you could run it on a Raspberry Pi connected to network storage or you could run it in the cloud pointing at an EBS volume, or, more commonly, you could run the service in your own infrastructure to ensure your files are never stored outside your own environment.</description></item><item><title>Context Binding (OTC)</title><link>https://docs.natster.io/pr-preview/pr-96/developer-guide/context-binding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-96/developer-guide/context-binding/</guid><description>&lt;p>context binding&lt;/p></description></item><item><title>Nothing but NATS</title><link>https://docs.natster.io/pr-preview/pr-96/developer-guide/nothing-but-nats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-96/developer-guide/nothing-but-nats/</guid><description>&lt;p>nothing but nats&lt;/p></description></item><item><title>Troubleshooting</title><link>https://docs.natster.io/pr-preview/pr-96/developer-guide/troubleshooting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-96/developer-guide/troubleshooting/</guid><description>&lt;p>troubleshooting&lt;/p></description></item><item><title>Streaming Media</title><link>https://docs.natster.io/pr-preview/pr-96/developer-guide/streaming-media/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-96/developer-guide/streaming-media/</guid><description>&lt;p>streamy&lt;/p>
&lt;p>one-use encryption keys&lt;/p></description></item><item><title>Global Event Log</title><link>https://docs.natster.io/pr-preview/pr-96/developer-guide/global-event-log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.natster.io/pr-preview/pr-96/developer-guide/global-event-log/</guid><description>TBD</description></item></channel></rss>